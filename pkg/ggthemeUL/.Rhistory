"#EACE12", "#CB511C", "#9A2F31", "#C43788"),
`cold` = c("#0033a0", "#0082C0", "#00B1AC", "#00694E"),
`warm` = c("#EACE12", "#CB511C", "#9A2F31", "#C43788"),
`red`     = c("#F9D6D4", "#E03127"),
`antracit` = c("#DEDEDE", "#58595b"),
`medium`     = c("#EDEEEE", "#A7A8AA"),
`darkblue`   = c("#CCD6EC","#0033a0"),
`navyblue`   = c("#CCE6F2", "#0082C0"),
`turquoise`   = c("#CCEFEE", "#00B1AC"),
`green`   = c("#CCE1DC", "#00694E"),
`yellow`   = c("#FBF5D0", "#EACE12"),
`orange`   = c("#F5DCD2", "#CB511C"),
`burgundy`   = c("#EBD5D6", "#9A2F31"),
`pink`   = c("#F3D7E7", "#C43788"),
`redW`     = c(neutralColor, "#E03127"),
`antracitW` = c(neutralColor, "#58595b"),
`mediumW`     = c(neutralColor, "#A7A8AA"),
`darkblueW`   = c(neutralColor, "#0033a0"),
`navyblueW`   = c(neutralColor, "#0082C0"),
`turquoiseW`   = c(neutralColor, "#00B1AC"),
`greenW`   = c(neutralColor,"#00694E"),
`yellow`   = c(neutralColor,"#EACE12"),
`orangeW`   = c(neutralColor, "#CB511C"),
`burgundyW`   = c(neutralColor, "#9A2F31"),
`pinkW`   = c(neutralColor, "#C43788"),
`redBlue`   = c("#9A2F31", neutralColor, "#0082C0"),
`redGreen`   = c("#9A2F31", neutralColor, "#00694E"),
`blueTurquise`   = c("#0082C0", neutralColor, "#00B1AC"),
`blueYellow`   = c("#0082C0", neutralColor, "#EACE12")
)
pal <- ul_palettes[[palette]]
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
basicChartCont <- ggplot(df, aes(x = age, y = height, color = weight)) +
geom_point(size = 5) +
theme_ul(legend.justification = c(0, 1)) +
labs(x = "Age (years)",
y = "Height (cm)",
title = "Lorem ipsum dolor sit amet",
caption = "Data source: this is all fake data.",
subtitle = "Eiusmod tempor incididunt ut labore et dolore magna.",
color = "Weight")
basicChartCont + scale_color_ul(palette = "navyblue", discrete = FALSE)
#' This function returns a color scale to be used with ggplot2. It uses color palettes defined according to the visual identity of the University of Ljubljana.
#' @seealso \code{\link[ggplot2]{scale_color_gradientn}}, \code{\link[ggplot2]{scale_color_gradient2}}, \code{\link[ggplot2]{discrete_scale}}
#' @examples
#' \dontrun{
#' ggplot(mtcars, aes(x = mpg, y = wt, color = factor(gear))) +
#' geom_point(size = 4) +
#' scale_color_ul()
#' }
#' @importFrom ggplot2 discrete_scale scale_color_gradientn scale_color_gradient2 guide_colourbar
#' @export
scale_color_ul <- function(palette = "primary", discrete = TRUE, reverse = FALSE, midpoint = NA, neutralColor = "white", guide = guide_colourbar(frame.colour = "#58595b", title.vjust = 0.8), ...) {
if (discrete) {
pal <- ul_pal(palette = palette, reverse = reverse, neutralColor = neutralColor)
return(discrete_scale("colour", paste0("ul_", palette), palette = pal, ...))
}
if (!discrete){
if (palette %in% names(ul_color())) palette <- paste0(palette, "W")
pal <- ul_pal(palette = palette, reverse = reverse, neutralColor = neutralColor)
if (is.na(midpoint)) {return(scale_color_gradientn(colours = pal(256), guide = guide, ...))}
if (!is.na(midpoint)) {barve <- pal(3); return(scale_color_gradient2(low = barve[1], mid = barve[2], high = barve[3], midpoint = midpoint, guide = guide,...))}
}
}
basicChartCont + scale_color_ul(palette = "navyblue", discrete = FALSE)
basicChartCont + scale_color_ul(palette = "red", discrete = FALSE)
basicChartCont + scale_color_ul(palette = "red")
basicChartCont + scale_color_ul(palette = "red", discrete = FALSE)
attr(ul_color(), "colorNames")
#' This function returns a color scale to be used with ggplot2. It uses color palettes defined according to the visual identity of the University of Ljubljana.
#' @seealso \code{\link[ggplot2]{scale_color_gradientn}}, \code{\link[ggplot2]{scale_color_gradient2}}, \code{\link[ggplot2]{discrete_scale}}
#' @examples
#' \dontrun{
#' ggplot(mtcars, aes(x = mpg, y = wt, color = factor(gear))) +
#' geom_point(size = 4) +
#' scale_color_ul()
#' }
#' @importFrom ggplot2 discrete_scale scale_color_gradientn scale_color_gradient2 guide_colourbar
#' @export
scale_color_ul <- function(palette = "primary", discrete = TRUE, reverse = FALSE, midpoint = NA, neutralColor = "white", guide = guide_colourbar(frame.colour = "#58595b", title.vjust = 0.8), ...) {
if (discrete) {
pal <- ul_pal(palette = palette, reverse = reverse, neutralColor = neutralColor)
return(discrete_scale("colour", paste0("ul_", palette), palette = pal, ...))
}
if (!discrete){
if (palette %in% attr(ul_color(), "colorNames")) palette <- paste0(palette, "W")
pal <- ul_pal(palette = palette, reverse = reverse, neutralColor = neutralColor)
if (is.na(midpoint)) {return(scale_color_gradientn(colours = pal(256), guide = guide, ...))}
if (!is.na(midpoint)) {barve <- pal(3); return(scale_color_gradient2(low = barve[1], mid = barve[2], high = barve[3], midpoint = midpoint, guide = guide,...))}
}
}
basicChartCont + scale_color_ul(palette = "navyblue", discrete = FALSE)
#' This function returns a color scale to be used with ggplot2. It uses color palettes defined according to the visual identity of the University of Ljubljana.
#' @seealso \code{\link[ggplot2]{scale_color_gradientn}}, \code{\link[ggplot2]{scale_color_gradient2}}, \code{\link[ggplot2]{discrete_scale}}
#' @examples
#' \dontrun{
#' ggplot(mtcars, aes(x = mpg, y = wt, color = factor(gear))) +
#' geom_point(size = 4) +
#' scale_color_ul()
#' }
#' @importFrom ggplot2 discrete_scale scale_color_gradientn scale_color_gradient2 guide_colourbar
#' @export
scale_color_ul <- function(palette = "primary", discrete = TRUE, reverse = FALSE, midpoint = NA, neutralColor = "white", guide = guide_colourbar(frame.colour = "#58595b", title.vjust = 0.8), ...) {
if (discrete) {
pal <- ul_pal(palette = palette, reverse = reverse, neutralColor = neutralColor)
return(discrete_scale("colour", paste0("ul_", palette), palette = pal, ...))
}
if (!discrete){
if (palette %in% attr(ul_color(), "colorNames")) palette <- paste0(palette, "W")
pal <- ul_pal(palette = palette, reverse = reverse, neutralColor = neutralColor)
if (is.na(midpoint)) {return(scale_color_gradientn(colours = pal(256), guide = guide, ...))}
if (!is.na(midpoint)) {barve <- pal(3); return(scale_color_gradient2(low = barve[1], mid = barve[2], high = barve[3], midpoint = midpoint, guide = guide,...))}
}
}
basicChartCont + scale_color_ul(palette = "navyblue", discrete = FALSE)
attr(ul_color(), "colorNames")
if (palette %in% attr(ul_color(), "colorNames")) palette <- paste0(palette, "W")
palette
remove.packages("ggthemeUL")
library(ggthemeUL)
attr(ul_color(), "colorNames")
if (palette %in% attr(ul_color(), "colorNames")) palette <- paste0(palette, "W")
pal <- ul_pal(palette = palette, reverse = reverse, neutralColor = neutralColor)
#' This function returns a color scale to be used with ggplot2. It uses color palettes defined according to the visual identity of the University of Ljubljana.
#' @seealso \code{\link[ggplot2]{scale_color_gradientn}}, \code{\link[ggplot2]{scale_color_gradient2}}, \code{\link[ggplot2]{discrete_scale}}
#' @examples
#' \dontrun{
#' ggplot(mtcars, aes(x = mpg, y = wt, color = factor(gear))) +
#' geom_point(size = 4) +
#' scale_color_ul()
#' }
#' @importFrom ggplot2 discrete_scale scale_color_gradientn scale_color_gradient2 guide_colourbar
#' @export
scale_color_ul <- function(palette = "primary", discrete = TRUE, reverse = FALSE, midpoint = NA, neutralColor = "white", guide = guide_colourbar(frame.colour = "#58595b", title.vjust = 0.8), ...) {
if (discrete) {
pal <- ul_pal(palette = palette, reverse = reverse, neutralColor = neutralColor)
return(discrete_scale("colour", paste0("ul_", palette), palette = pal, ...))
}
if (!discrete){
if (palette %in% attr(ul_color(), "colorNames")) palette <- paste0(palette, "W")
pal <- ul_pal(palette = palette, reverse = reverse, neutralColor = neutralColor)
if (is.na(midpoint)) {return(scale_color_gradientn(colours = pal(256), guide = guide, ...))}
if (!is.na(midpoint)) {barve <- pal(3); return(scale_color_gradient2(low = barve[1], mid = barve[2], high = barve[3], midpoint = midpoint, guide = guide,...))}
}
}
palette ="red"
neutralColor <- ifelse(neutralColor %in% attr(ul_color(), "colorNames"), yes = ul_color(neutralColor), no = neutralColor)
ul_palettes <- list(
`primary` = c("#0033a0", "#0082C0", "#00B1AC", "#00694E",
"#EACE12", "#CB511C", "#9A2F31", "#C43788"),
`cold` = c("#0033a0", "#0082C0", "#00B1AC", "#00694E"),
`warm` = c("#EACE12", "#CB511C", "#9A2F31", "#C43788"),
`red`     = c("#F9D6D4", "#E03127"),
`antracit` = c("#DEDEDE", "#58595b"),
`medium`     = c("#EDEEEE", "#A7A8AA"),
`darkblue`   = c("#CCD6EC","#0033a0"),
`navyblue`   = c("#CCE6F2", "#0082C0"),
`turquoise`   = c("#CCEFEE", "#00B1AC"),
`green`   = c("#CCE1DC", "#00694E"),
`yellow`   = c("#FBF5D0", "#EACE12"),
`orange`   = c("#F5DCD2", "#CB511C"),
`burgundy`   = c("#EBD5D6", "#9A2F31"),
`pink`   = c("#F3D7E7", "#C43788"),
`redW`     = c(neutralColor, "#E03127"),
`antracitW` = c(neutralColor, "#58595b"),
`mediumW`     = c(neutralColor, "#A7A8AA"),
`darkblueW`   = c(neutralColor, "#0033a0"),
`navyblueW`   = c(neutralColor, "#0082C0"),
`turquoiseW`   = c(neutralColor, "#00B1AC"),
`greenW`   = c(neutralColor,"#00694E"),
`yellow`   = c(neutralColor,"#EACE12"),
`orangeW`   = c(neutralColor, "#CB511C"),
`burgundyW`   = c(neutralColor, "#9A2F31"),
`pinkW`   = c(neutralColor, "#C43788"),
`redBlue`   = c("#9A2F31", neutralColor, "#0082C0"),
`redGreen`   = c("#9A2F31", neutralColor, "#00694E"),
`blueTurquise`   = c("#0082C0", neutralColor, "#00B1AC"),
`blueYellow`   = c("#0082C0", neutralColor, "#EACE12")
)
pal <- ul_palettes[[palette]]
pal
palette
colorRampPalette(pal, ...)
pal <- ul_palettes[[palette]]
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
basicChartCont <- ggplot(df, aes(x = age, y = height, color = weight)) +
geom_point(size = 5) +
theme_ul(legend.justification = c(0, 1)) +
labs(x = "Age (years)",
y = "Height (cm)",
title = "Lorem ipsum dolor sit amet",
caption = "Data source: this is all fake data.",
subtitle = "Eiusmod tempor incididunt ut labore et dolore magna.",
color = "Weight")
basicChartCont + scale_color_ul(palette = "navyblue", discrete = FALSE)
(palette = "navyblue"
palette = "navyblue"
discrete = FALSE
#'
#' @return A function that takes an integer argument n and returns a character vector of n colors.
#'
#' @examples
#' \dontrun{
#' pal <- ul_pal("redBlue", reverse = TRUE)
#' pal(7)  # Generates a reversed divergent palette of 7 colors
#' }
#' @importFrom grDevices colorRamp colorRampPalette
#' @export
ul_pal <- function(palette = "primary", neutralColor = "white", reverse = FALSE, ...) {
neutralColor <- ifelse(neutralColor %in% attr(ul_color(), "colorNames"), yes = ul_color(neutralColor), no = neutralColor)
ul_palettes <- list(
`primary` = c("#0033a0", "#0082C0", "#00B1AC", "#00694E",
"#EACE12", "#CB511C", "#9A2F31", "#C43788"),
`cold` = c("#0033a0", "#0082C0", "#00B1AC", "#00694E"),
`warm` = c("#EACE12", "#CB511C", "#9A2F31", "#C43788"),
`red`     = c("#F9D6D4", "#E03127"),
`antracit` = c("#DEDEDE", "#58595b"),
`medium`     = c("#EDEEEE", "#A7A8AA"),
`darkblue`   = c("#CCD6EC","#0033a0"),
`navyblue`   = c("#CCE6F2", "#0082C0"),
`turquoise`   = c("#CCEFEE", "#00B1AC"),
`green`   = c("#CCE1DC", "#00694E"),
`yellow`   = c("#FBF5D0", "#EACE12"),
`orange`   = c("#F5DCD2", "#CB511C"),
`burgundy`   = c("#EBD5D6", "#9A2F31"),
`pink`   = c("#F3D7E7", "#C43788"),
`redW`     = c(neutralColor, "#E03127"),
`antracitW` = c(neutralColor, "#58595b"),
`mediumW`     = c(neutralColor, "#A7A8AA"),
`darkblueW`   = c(neutralColor, "#0033a0"),
`navyblueW`   = c(neutralColor, "#0082C0"),
`turquoiseW`   = c(neutralColor, "#00B1AC"),
`greenW`   = c(neutralColor,"#00694E"),
`yellow`   = c(neutralColor,"#EACE12"),
`orangeW`   = c(neutralColor, "#CB511C"),
`burgundyW`   = c(neutralColor, "#9A2F31"),
`pinkW`   = c(neutralColor, "#C43788"),
`redBlue`   = c("#9A2F31", neutralColor, "#0082C0"),
`redGreen`   = c("#9A2F31", neutralColor, "#00694E"),
`blueTurquise`   = c("#0082C0", neutralColor, "#00B1AC"),
`blueYellow`   = c("#0082C0", neutralColor, "#EACE12")
)
pal <- ul_palettes[[palette]]
if (reverse) pal <- rev(pal)
colorRampPalette(pal, ...)
}
basicChartCont + scale_color_ul(palette = "navyblue", discrete = FALSE)
basicChartCont
basicChartCont <- ggplot(df, aes(x = age, y = height, color = weight)) +
geom_point(size = 5) +
theme_ul(legend.justification = c(0, 1)) +
labs(x = "Age (years)",
y = "Height (cm)",
title = "Lorem ipsum dolor sit amet",
caption = "Data source: this is all fake data.",
subtitle = "Eiusmod tempor incididunt ut labore et dolore magna.",
color = "Weight")
basicChartCont
ggplot(df, aes(x = age, y = height, color = weight)) +
geom_point(size = 5)
ggplot(df, aes(x = age, y = height, color = weight)) +
geom_point(size = 5) +
theme_ul(legend.justification = c(0, 1))
ul_color("transparent")
#' subtitle = "V-shape engines are typically larger",
#' caption = "Data source: Motor Trend US magazine.",
#' color = "1/4 mile time (seconds)",
#' size = "Weight (1000 lbs)") +
#' scale_color_ul(palette = "red", discrete = FALSE) +
#' theme_ul(plot.background.fill = ul_color("lajt"))
#' }
#' @importFrom ggplot2 element_rect theme_gray theme element_blank element_line element_text
#' @export
#' @seealso \code{\link[ggplot2]{theme}}
theme_ul <- function(legend.position = "top",
panel.background.fill = "#E8E9EA",
plot.background.fill = "white",
panel.grid.major.color = NULL,
legend.justification = c(0, 1),
legend.key = element_rect(fill = "transparent"),
text = element_text(colour = "#58595b"),
axis.text = element_text(colour = "#58595b"),
strip.text.x = element_text(colour = "#58595b"),
plot.caption = element_text(hjust = 1),
legend.title = element_text(face = "bold"),
axis.title = element_text(face="bold"),
plot.title = element_text(face="bold"),
plot.subtitle = element_text(hjust = 0),
#legend.background = element_rect(fill=ul_color("transparent"), colour="transparent"),
...){
if (is.null(panel.grid.major.color)) {
panel.grid.major.color <- ifelse(panel.background.fill == "white", yes = "#E8E9EA", no = "white")
}
theme_gray()
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = panel.grid.major.color),
axis.ticks = element_blank(),
# legend
legend.justification = legend.justification,
legend.background = legend.background,
legend.key = legend.key,
#text elements
strip.text.x = strip.text.x,
legend.position =  legend.position,
legend.title = legend.title,
axis.title = axis.title,
plot.title = plot.title,
plot.subtitle = plot.subtitle,
plot.caption = plot.caption,
text = text,
axis.text = axis.text,
plot.background = element_rect(fill = plot.background.fill),
panel.background = element_rect(fill = panel.background.fill), ...
)
}
ggplot(df, aes(x = age, y = height, color = weight)) +
geom_point(size = 5) +
theme_ul(legend.justification = c(0, 1))
#' subtitle = "V-shape engines are typically larger",
#' caption = "Data source: Motor Trend US magazine.",
#' color = "1/4 mile time (seconds)",
#' size = "Weight (1000 lbs)") +
#' scale_color_ul(palette = "red", discrete = FALSE) +
#' theme_ul(plot.background.fill = ul_color("lajt"))
#' }
#' @importFrom ggplot2 element_rect theme_gray theme element_blank element_line element_text
#' @export
#' @seealso \code{\link[ggplot2]{theme}}
theme_ul <- function(legend.position = "top",
panel.background.fill = "#E8E9EA",
plot.background.fill = "white",
panel.grid.major.color = NULL,
legend.justification = c(0, 1),
legend.key = element_rect(fill = "transparent"),
text = element_text(colour = "#58595b"),
axis.text = element_text(colour = "#58595b"),
strip.text.x = element_text(colour = "#58595b"),
plot.caption = element_text(hjust = 1),
legend.title = element_text(face = "bold"),
axis.title = element_text(face="bold"),
plot.title = element_text(face="bold"),
plot.subtitle = element_text(hjust = 0),
#legend.background = element_rect(fill=ul_color("transparent"), colour="transparent"),
...){
if (is.null(panel.grid.major.color)) {
panel.grid.major.color <- ifelse(panel.background.fill == "white", yes = "#E8E9EA", no = "white")
}
theme_gray()
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = panel.grid.major.color),
axis.ticks = element_blank(),
# legend
legend.justification = legend.justification,
legend.background = legend.background,
legend.key = legend.key,
#text elements
strip.text.x = strip.text.x,
legend.position =  legend.position,
legend.title = legend.title,
axis.title = axis.title,
plot.title = plot.title,
plot.subtitle = plot.subtitle,
plot.caption = plot.caption,
text = text,
axis.text = axis.text,
plot.background = element_rect(fill = plot.background.fill),
panel.background = element_rect(fill = panel.background.fill), ...
)
}
ggplot(df, aes(x = age, y = height, color = weight)) +
geom_point(size = 5) +
theme_ul(legend.justification = c(0, 1))
#' subtitle = "V-shape engines are typically larger",
#' caption = "Data source: Motor Trend US magazine.",
#' color = "1/4 mile time (seconds)",
#' size = "Weight (1000 lbs)") +
#' scale_color_ul(palette = "red", discrete = FALSE) +
#' theme_ul(plot.background.fill = ul_color("lajt"))
#' }
#' @importFrom ggplot2 element_rect theme_gray theme element_blank element_line element_text
#' @export
#' @seealso \code{\link[ggplot2]{theme}}
theme_ul <- function(legend.position = "top",
panel.background.fill = "#E8E9EA",
plot.background.fill = "white",
panel.grid.major.color = NULL,
legend.justification = c(0, 1),
legend.key = element_rect(fill = "transparent"),
text = element_text(colour = "#58595b"),
axis.text = element_text(colour = "#58595b"),
strip.text.x = element_text(colour = "#58595b"),
plot.caption = element_text(hjust = 1),
legend.title = element_text(face = "bold"),
axis.title = element_text(face="bold"),
plot.title = element_text(face="bold"),
plot.subtitle = element_text(hjust = 0),
legend.background = element_rect(fill="transparent", colour="transparent"),
...){
if (is.null(panel.grid.major.color)) {
panel.grid.major.color <- ifelse(panel.background.fill == "white", yes = "#E8E9EA", no = "white")
}
theme_gray()
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = panel.grid.major.color),
axis.ticks = element_blank(),
# legend
legend.justification = legend.justification,
legend.background = legend.background,
legend.key = legend.key,
#text elements
strip.text.x = strip.text.x,
legend.position =  legend.position,
legend.title = legend.title,
axis.title = axis.title,
plot.title = plot.title,
plot.subtitle = plot.subtitle,
plot.caption = plot.caption,
text = text,
axis.text = axis.text,
plot.background = element_rect(fill = plot.background.fill),
panel.background = element_rect(fill = panel.background.fill), ...
)
}
ggplot(df, aes(x = age, y = height, color = weight)) +
geom_point(size = 5) +
theme_ul(legend.justification = c(0, 1))
#' subtitle = "V-shape engines are typically larger",
#' caption = "Data source: Motor Trend US magazine.",
#' color = "1/4 mile time (seconds)",
#' size = "Weight (1000 lbs)") +
#' scale_color_ul(palette = "red", discrete = FALSE) +
#' theme_ul(plot.background.fill = ul_color("lajt"))
#' }
#' @importFrom ggplot2 element_rect theme_gray theme element_blank element_line element_text
#' @export
#' @seealso \code{\link[ggplot2]{theme}}
theme_ul <- function(legend.position = "top",
panel.background.fill = "#E8E9EA",
plot.background.fill = "white",
panel.grid.major.color = NULL,
legend.justification = c(0, 1),
legend.key = element_rect(fill = "transparent"),
text = element_text(colour = "#58595b"),
axis.text = element_text(colour = "#58595b"),
strip.text.x = element_text(colour = "#58595b"),
plot.caption = element_text(hjust = 1),
legend.title = element_text(face = "bold"),
axis.title = element_text(face="bold"),
plot.title = element_text(face="bold"),
plot.subtitle = element_text(hjust = 0),
legend.background = element_rect(fill="transparent", colour="transparent"),
...){
if (is.null(panel.grid.major.color)) {
panel.grid.major.color <- ifelse(panel.background.fill == "white", yes = "#E8E9EA", no = "white")
}
theme_gray()
theme(
panel.grid.minor = element_blank(),
panel.grid.major = element_line(color = panel.grid.major.color),
axis.ticks = element_blank(),
# legend
legend.justification = legend.justification,
legend.background = legend.background,
legend.key = legend.key,
#text elements
strip.text.x = strip.text.x,
legend.position =  legend.position,
legend.title = legend.title,
axis.title = axis.title,
plot.title = plot.title,
plot.subtitle = plot.subtitle,
plot.caption = plot.caption,
text = text,
axis.text = axis.text,
plot.background = element_rect(fill = plot.background.fill),
panel.background = element_rect(fill = panel.background.fill), ...
)
}
basicChartCont <- ggplot(df, aes(x = age, y = height, color = weight)) +
geom_point(size = 5) +
theme_ul(legend.justification = c(0, 1)) +
labs(x = "Age (years)",
y = "Height (cm)",
title = "Lorem ipsum dolor sit amet",
caption = "Data source: this is all fake data.",
subtitle = "Eiusmod tempor incididunt ut labore et dolore magna.",
color = "Weight")
basicChartCont + scale_color_ul(palette = "navyblue", discrete = FALSE)
basicChartCont + scale_color_ul(palette = "navyblue", discrete = FALSE, values = c(0, 0.8, 1))
basicChartCont
basicChartCont + scale_color_ul(palette = "navyblue", discrete = FALSE)
basicChartCont <- ggplot(df, aes(x = age, y = height, color = weight)) +
geom_point(size = 5) +
theme_ul(legend.justification = c(0, 1)) +
labs(x = "Age (years)",
y = "Height (cm)",
title = "Lorem ipsum dolor sit amet",
caption = "Data source: this is all fake data.",
subtitle = "Eiusmod tempor incididunt ut labore et dolore magna.",
color = "Weight")
basicChartCont
basicChartCont + scale_color_ul(palette = "navyblue", discrete = FALSE)
library(ggthemeUL)
ul_color("red")
ul_color()
ul_color()
