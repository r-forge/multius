nravni <- length(ravni)
res <- matrix(NA, nrow = length(numVarNames), ncol = 4 + nravni + as.numeric(omegaSq==TRUE))
for (i in 1:length(numVarNames)) {
tmp <- data[, c(which(names(data)==catVarName),  which(names(data)==numVarNames[i]))]
means <- round(as.vector(by(data = tmp[, numVarNames[i]], INDICES = tmp[, catVarName], mean, na.rm = TRUE)), 2)
res[i, 1:nravni] <- means
model <- oneway.test(tmp[, numVarNames[i]] ~ as.factor(tmp[, catVarName]), var.equal = FALSE)
res[i, 1+nravni] <- round(model$statistic, 2)
res[i, 2+nravni] <- model$parameter[1]
res[i, 3+nravni] <- round(model$parameter[2])
res[i, 4+nravni] <- ifelse(model$p.value < 0.001, yes = "< 0.01", no = round(model$p.value, 3))
if (omegaSq == TRUE) {
modelAov <- summary(aov(tmp[, numVarNames[i]] ~ as.factor(tmp[, catVarName])))
res[i, 4+nravni+  as.numeric(omegaSq==TRUE)] <- round((modelAov[[1]][1,2] - modelAov[[1]][1,1]*(modelAov[[1]][2,3]))/(modelAov[[1]][1,2] + modelAov[[1]][2,2] + modelAov[[1]][2,3]), 2)
}
}
labele <- c(ravni, "F", "df1", "df2", "p")
if (omegaSq==TRUE) labele <- c(labele, "Omega Sq")
colnames(res) <- labele
rownames(res) <- numVarNames
return(res)
}
report.anova(catVarName = "gear", numVarNames = c("mpg", "wt"), data = mtcars, omegaSq = TRUE)
report.anova(catVarName = "gear", numVarNames = c("mpg", "wt"), data = mtcars, omegaSq = FALSE)
devtools::document()
report.ttest <- function(catVarName, numVarNames, data, hedgesG = FALSE, CI = FALSE){
if (is.factor(data[, which(names(data)==catVarName)]) == FALSE){
data[, which(names(data)==catVarName)] <- as.factor(data[, which(names(data)==catVarName)])
}
if (length(catVarName) > 1) stop("More than one categorical variable is provided.")
ravni <- levels(data[, which(names(data)==catVarName)])
nravni <- length(ravni)
res <- matrix(NA, nrow = length(numVarNames), ncol = 3 + as.numeric(CI)*2 + nravni + as.numeric(hedgesG))
for (i in 1:length(numVarNames)) {
tmp <- data[, c(which(names(data)==catVarName),  which(names(data)==numVarNames[i]))]
means <- round(as.vector(by(data = tmp[, numVarNames[i]], INDICES = tmp[, catVarName], mean, na.rm = TRUE)), 2)
res[i, 1:nravni] <- means
model <- t.test(tmp[, numVarNames[i]] ~ as.factor(data[, catVarName]), var.equal = FALSE)
res[i, 1+nravni] <- round(model$statistic, 2)
res[i, 2+nravni] <- round(model$parameter, 2)
res[i, 3+nravni] <- ifelse(model$p.value < 0.001, yes = "< 0.01", no = round(model$p.value, 3))
if (CI) {
res[i, 4+nravni] <- round(model$conf.int[1], 2)
res[i, 5+nravni] <- round(model$conf.int[2], 2)
}
if (hedgesG) {
res[i, ncol(res)] <- round(g(ordinal = tmp[, which(names(tmp)==catVarName)],
interval = tmp[, which(names(tmp)==numVarNames[i])],
correct = TRUE), 2)
}
}
if (CI) labele <- c(ravni, "t", "df", "p", "CI95 low", "CI95 high", ifelse(hedgesG==TRUE, yes = "Hedges G", no = ""))
if (!CI) labele <- c(ravni, "t", "df", "p",  ifelse(hedgesG==TRUE, yes = "Hedges G", no = ""))
labele <- labele[!labele %in% ""]
colnames(res) <- labele
rownames(res) <- numVarNames
return(res)
}
report.ttest("species", c("sepal.length", "sepal.width"), iris, hedgesG = TRUE, CI = TRUE)
iris
mtcars
report.ttest(catVarName = "am", c("mpg", "disp"), mtcars, hedgesG = TRUE, CI = TRUE)
devtools::document()
library(handyReport)
library(ggplot2)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?font_add_google
devtools::document()
?showtext_auto
devtools::document()
devtools::document()
devtools::document()
remove.packages("handyReport")
?font_files
?showtext_auto
devtools::document()
?font_add_google
devtools::document()
library(handyReport)
library(ggplot2)
p <- ggplot(mtcars, aes(x = mpg, y = disp)) +
geom_point() +
labs(title = "Title",
subtitle = "Subtitle",
caption = "Caption",
y = "Y axis title",
x = "X axis title") +
theme_marjan(legend.position = "bottom")
print(p)
library(handyReport)
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = disp, color = as.factor(am))) +
geom_point() +
labs(title = "Title",
color  = "Legend title",
subtitle = "Subtitle",
caption = "Caption",
y = "Y axis title",
x = "X axis title") +
theme_marjan(legend.position = "bottom")
#'       color  = "Legend title",
#'      subtitle = "Subtitle",
#'      caption = "Caption",
#'       y = "Y axis title",
#'       x = "X axis title") +
#'  theme_marjan(legend.position = "bottom")
#' }
#'
#' @importFrom ggplot2 theme_gray element_blank element_text theme
#' @export
theme_marjan <- function(legend.position = "top"){
theme_gray()
theme(
panel.grid.minor = element_blank(),
axis.ticks = element_blank(),
#text elements
strip.text.x = element_text(colour = 'black'),
legend.position =  legend.position,
legend.title = element_text(face = "bold"),
axis.title = element_text(face="bold"),
plot.title = element_text(face="bold"),
plot.subtitle = element_text(hjust = 0),
plot.caption = element_text(hjust = 1)
)
}
library(ggplot2)
ggplot(mtcars, aes(x = mpg, y = disp, color = as.factor(am))) +
geom_point() +
labs(title = "Title",
color  = "Legend title",
subtitle = "Subtitle",
caption = "Caption",
y = "Y axis title",
x = "X axis title") +
theme_marjan(legend.position = "bottom")
library(ggplot2)
ggplot(iris, aes(Sepal.Length, Sepal.Width, fill = Species)) +
geom_point(shape = 21, size = 3, color = "white") +
scale_fill_marjan(palette = "myBlue")
ggplot(mtcars, aes(x = gear, fill = as.factor(gear))) +
geom_bar(position = "dodge") +
theme_marjan() +
scale_fill_marjan("main")
getwd()
ggplot(mtcars, aes(x = mpg, y = disp, size = hp, color = carb)) +
geom_point() +
theme_marjan() +
scale_color_marjan(palette = "divergentPolar", discrete = FALSE)
ggplot(mtcars, aes(x = gear)) +
geom_bar(fill = marjan_color("darkblue"))
ggplot(mtcars, aes(x = gear)) +
geom_bar(fill = marjan_color("myBlue"))
remove.packages("handyReport")
library(handyReport)
library(handyReport)
source("marjanColors.R")
setwd("C:/Users/marss/Dropbox/FDV/multiUS/multiUSrForge/pkg/handyReport")
source("marjanColors.R")
library(handyReport)
}
}
report.freqTab <- function(x, dec = 2, cumulative = FALSE, useNA = "always", language = "english"){
if (is.factor(x) == FALSE) x <- as.factor(x)
tblValid <- table(x)
cumFreqValid <- cumsum(tblValid)
percValid <- tblValid/sum(tblValid) * 100
cumPercValid <- cumsum(percValid)
if (!is.null(dec)) {
percValid <- round(percValid, dec)
cumPercValid <- round(cumPercValid, dec)
}
frekValid <- as.data.frame(cbind("Category" = names(tblValid), "Valid %" = percValid, "Valid Cum. %" = cumPercValid), stringsAsFactors = FALSE)
if (language %in% c("Slovene", "slovene", "slo", "s")) colnames(frekValid) <- c("Kategorija", "Veljavni %", "Veljavni kumulativni %")
frekValid <- rbind(frekValid, c(NA,0,0))
if (useNA != "no"){
tbl <- table(x, useNA = useNA)
cumFreq <- cumsum(tbl)
perc <- tbl/sum(tbl) * 100
cumPerc <- cumsum(perc)
if (!is.null(dec)) {
perc <- round(perc, dec)
cumPerc <- round(cumPerc, dec)
}
frekTab <- as.data.frame(cbind("Category" = names(tbl),  "Freq." = tbl, "Cum. Freq." = cumFreq, "%" = perc, "Cum. %" = cumPerc), stringsAsFactors = FALSE)
freqTab <- merge(frekTab, frekValid, by = "Category", all = TRUE, sort = FALSE)
freqTab[is.na(freqTab$Category), "Category"] <- "Missing value"
if (language %in% c("Slovene", "slovene", "slo", "s")) colnames(freqTab) <- c("Kategorija", "Frekvenca", "Kumulativne frekvence", "Kumulativni %")
freqTab[is.na(freqTab)] <- ""
}
if (useNA == "no") freqTab <- frekValid
if (cumulative == FALSE) {
if (language %in% "english") freqTab <- freqTab[, -which(colnames(freqTab) %in% c("Cum. Freq.", "Cum. %", "Valid Cum. %"))]
if (language %in% c("Slovene", "slovene", "slo", "s")) freqTab <- freqTab[, -which(colnames(freqTab) %in% c("Kumulativne frekvence", "Kumulativni %", "Veljavni kumulativni %"))]
}
return(freqTab)
}
report.ordinal <- function(ordVarNames, data, type = 1, dec = 1, language = "english", attachLabels = FALSE){
labele <- levels(data[, ordVarNames[1]])
nravni <- length(labele)
res <- matrix(NA, nrow = length(ordVarNames), ncol = nravni + 3)
colnames(res) <- c(labele, "n", "mean", "sd")
rownames(res) <- ordVarNames
for (i in 1:length(ordVarNames)){
if (type == 1)  res[i, 1:(nravni+1)] <- c(round(prop.table(table(data[,ordVarNames[i]]))*100, dec), sum(!is.na(data[,ordVarNames[i]])))
if (type == 2) res[i, 1:(nravni+1)] <- c(table(data[, ordVarNames[i]]), sum(!is.na(data[,ordVarNames[i]])))
if (type == 3) res[i, 1:(nravni+1)] <- c(paste0(table(data[, ordVarNames[i]]), " (", round(prop.table(table(data[,ordVarNames[i]]))*100, dec), ")"), sum(!is.na(data[,ordVarNames[i]])))
res[i, (nravni+2):(nravni+3)] <- round(c(mean(as.numeric(data[, ordVarNames[i]]), na.rm = TRUE), sd(as.numeric(data[, ordVarNames[i]]), na.rm = TRUE)), digits = dec)
}
if (language %in% c("Slovene", "slovene", "slo", "s")) {
colnames(res)[colnames(res) %in% "mean"] <- "povprečje"
colnames(res)[colnames(res) %in% "sd"] <- "standardni odklon"
}
if (attachLabels == TRUE) try({rownames(res) <- attributes(data)$variable.labels[rownames(res)]}, silent = TRUE)
return(res)
}
#'         4) p-value,
#'         5) correlation coefficient (Pearson or Spearman, as specified),
#'         6) 95% confidence interval lower bound (for Pearson's r),
#'         7) 95% confidence interval upper bound (for Pearson's r).
#'
#' @examples
#' report.cortest(varNamesX = "drat", varNamesY = c("wt", "disp", "hp"), data = mtcars)
#' @author Marjan Cugmas
#' @importFrom stats t.test aov chisq.test oneway.test sd t.test cor.test
#' @export
report.cortest <- function(varNamesX, varNamesY, data, method = "pearson"){
if (method == "pearson") {
res <- matrix(NA, nrow = length(varNamesX)*length(varNamesY), ncol = 7)
colnames(res) <- c("var", "t", "df", "p", "cor (Pearson)", "CI95 low", "CI95 high")
}
if (method == "spearman") {
res <- matrix(NA, nrow = length(varNamesX)*length(varNamesY), ncol = 4)
colnames(res) <- c("var", "S", "p", "cor (Spearman)")
}
stevec <- 1
for (i in 1:length(varNamesX)) {
for (j in 1:length(varNamesY)) {
cor.res <- cor.test(x = as.numeric(data[, varNamesX[i]]), y = as.numeric(data[,varNamesY[j]]), method = method, exact = FALSE)
if (method == "pearson"){
res[stevec, ] <- c(paste0(varNamesX[i], " and ", varNamesY[j]),
round(cor.res$statistic, 2),
ifelse(is.null(cor.res$parameter), yes = "", no = cor.res$parameter),
ifelse(cor.res$p.value < 0.001, yes = "< 0.01", no = round(cor.res$p.value, 3)),
round(cor.res$estimate, 2),
ifelse(is.null(cor.res$conf.int[1]), yes = "", no = round(cor.res$conf.int[1], 2)),
ifelse(is.null(cor.res$conf.int[2]), yes = "", no = round(cor.res$conf.int[2], 2)))
}
if (method == "spearman"){
res[stevec, ] <- c(paste0(varNamesX[i], " and ", varNamesY[j]),
round(cor.res$statistic, 2),
ifelse(cor.res$p.value < 0.001, yes = "< 0.01", no = round(cor.res$p.value, 3)),
round(cor.res$estimate, 2))
}
stevec <- stevec+1
}
}
return(res)
}
library(handyReport)
library(handyReport)
?svytable
??svytable
??svyby
?svyttest
?svyglm
?regTermTest
?svychisq
?svycor
??svycor
?svyby
?as.formula
report.freqTab <- function(catVarName, data,
dec = 2,
dec.freq = 0,
cumulative = FALSE,
useNA = "always",
language = "english",
total.row = TRUE){
utezi <- any(class(data) %in% c("survey.design2", "survey.design"))
if (!utezi) {
if (is.factor(data[, catVarName]) == FALSE) data[, catVarName] <- as.factor(data[, catVarName])
tblValid <- table(data[, catVarName])
} else {
tblValid <- round(survey::svytable(stats::as.formula(paste("~", catVarName)), data), dec.freq)
}
cumFreqValid <- cumsum(tblValid)
percValid <- tblValid/sum(tblValid) * 100
cumPercValid <- cumsum(percValid)
if (!is.null(dec)) {
percValid <- round(percValid, dec)
cumPercValid <- round(cumPercValid, dec)
}
frekValid <- as.data.frame(cbind("Category" = names(tblValid), "Valid %" = percValid, "Valid Cum. %" = cumPercValid), stringsAsFactors = FALSE)
if (useNA != "no"){
frekValid <- rbind(frekValid, c(NA,0,0))
if (!utezi) {
tbl <- table(data[, catVarName], useNA = useNA)
} else {tbl <- round(survey::svytable(stats::as.formula(paste("~", catVarName)), data, addNA = TRUE, na.action = "na.pass"), dec.freq)}
}
if (useNA == "no") {
tbl <- tblValid
}
cumFreq <- cumsum(tbl)
perc <- tbl/sum(tbl) * 100
cumPerc <- cumsum(perc)
if (!is.null(dec)) {
perc <- round(perc, dec)
cumPerc <- round(cumPerc, dec)
}
frekTab <- as.data.frame(cbind("Category" = names(tbl),  "Freq." = tbl, "Cum. Freq." = cumFreq, "%" = perc, "Cum. %" = cumPerc), stringsAsFactors = FALSE)
freqTab <- merge(frekTab, frekValid, by = "Category", all = TRUE, sort = FALSE)
freqTab[is.na(freqTab$Category), "Category"] <- "Missing value"
freqTab[is.na(freqTab)] <- ""
pogoj1 <- useNA == "no"
pogoj2 <- useNA == "ifany"
pogojTmp <- freqTab[freqTab$Category%in%"Missing value", "Valid Cum. %"]==0
pogoj3 <- ifelse(length(pogojTmp)==0, no = pogojTmp, yes = TRUE)
if (pogoj1 | (pogoj2&pogoj3)) {
freqTab <- freqTab[,-which(colnames(freqTab) %in% c("Valid %", "Valid Cum. %"))]
freqTab <- freqTab[!(freqTab$Category %in% "Missing value"),]
}
if (cumulative == FALSE) freqTab <- freqTab[, -which(colnames(freqTab) %in% c("Cum. Freq.", "Cum. %", "Valid Cum. %"))]
if (total.row) {
freqTab <- rbind(freqTab, c("Total", rep(NA, times = ncol(freqTab)-1)))
for (i in c("Freq.", "%", "Valid %")) {
if (i %in% colnames(frekTab)) {
vsota <- sum(as.numeric(freqTab[,i]), na.rm = TRUE)
if (i %in% c("%", "Valid %")) vsota <- formatC(round(vsota), format = "f", digits = dec)
freqTab[freqTab$Category %in% "Total", i] <- vsota
}
}
}
if (language %in% c("Slovene", "slovene", "slo", "s")) {
if (total.row) freqTab[freqTab$Category %in% "Total", "Category"] <- "Skupaj"
freqTab[freqTab$Category %in% "Missing value", "Category"] <- "Manjkajoča vrednost"
colnames(freqTab)[colnames(freqTab) %in% "Category"] <- "Kategorija"
colnames(freqTab)[colnames(freqTab) %in% "Freq."] <- "Frekvenca"
colnames(freqTab)[colnames(freqTab) %in% "Cum. Freq."] <- "Kumulativna frekvenca"
colnames(freqTab)[colnames(freqTab) %in% "%"] <- "Delež"
colnames(freqTab)[colnames(freqTab) %in% "Cum. %"] <- "Kumulativni delež"
colnames(freqTab)[colnames(freqTab) %in% "Valid %"] <- "Veljavni delež"
}
freqTab[is.na(freqTab)] <- ""
return(freqTab)
}
x <- mtcars$gear
x[sample(1:length(x), size = 5, replace = FALSE)] <- NA
report.freqTab(x = x, dec = 2, useNA = "always")
report.freqTab(catVarName = x, dec = 2, useNA = "always")
mtcars$gear
report.freqTab(catVarName = "gear, dec = 2, useNA = "always", data = mtcars)
report.freqTab(catVarName = "gear, dec = 2, useNA = "always", data = mtcars)
report.freqTab(catVarName = "gear, dec = 2, data = mtcars)
report.freqTab(catVarName = "gear, dec = 2, data = mtcars)
report.freqTab(catVarName = "gear, dec = 2, useNA = "always", data = mtcars)
library(handyReport)
??svysd
??svymean
library(handyReport)
library(handyReport)
library(handyReport)
report.freqTab <- function(catVarName, data,
dec = 2,
dec.freq = 0,
cumulative = FALSE,
useNA = "always",
language = "english",
total.row = TRUE){
utezi <- any(class(data) %in% c("survey.design2", "survey.design"))
if (!utezi) {
if (is.factor(data[, catVarName]) == FALSE) data[, catVarName] <- as.factor(data[, catVarName])
tblValid <- table(data[, catVarName])
} else {
tblValid <- round(survey::svytable(stats::as.formula(paste("~", catVarName)), data), dec.freq)
}
cumFreqValid <- cumsum(tblValid)
percValid <- tblValid/sum(tblValid) * 100
cumPercValid <- cumsum(percValid)
if (!is.null(dec)) {
percValid <- round(percValid, dec)
cumPercValid <- round(cumPercValid, dec)
}
frekValid <- as.data.frame(cbind("Category" = names(tblValid), "Valid %" = percValid, "Valid Cum. %" = cumPercValid), stringsAsFactors = FALSE)
if (useNA != "no"){
frekValid <- rbind(frekValid, c(NA,0,0))
if (!utezi) {
tbl <- table(data[, catVarName], useNA = useNA)
} else {tbl <- round(survey::svytable(stats::as.formula(paste("~", catVarName)), data, addNA = TRUE, na.action = "na.pass"), dec.freq)}
}
if (useNA == "no") {
tbl <- tblValid
}
cumFreq <- cumsum(tbl)
perc <- tbl/sum(tbl) * 100
cumPerc <- cumsum(perc)
if (!is.null(dec)) {
perc <- round(perc, dec)
cumPerc <- round(cumPerc, dec)
}
frekTab <- as.data.frame(cbind("Category" = names(tbl),  "Freq." = tbl, "Cum. Freq." = cumFreq, "%" = perc, "Cum. %" = cumPerc), stringsAsFactors = FALSE)
freqTab <- merge(frekTab, frekValid, by = "Category", all = TRUE, sort = FALSE)
freqTab[is.na(freqTab$Category), "Category"] <- "Missing value"
freqTab[is.na(freqTab)] <- ""
pogoj1 <- useNA == "no"
pogoj2 <- useNA == "ifany"
pogojTmp <- freqTab[freqTab$Category%in%"Missing value", "Valid Cum. %"]==0
pogoj3 <- ifelse(length(pogojTmp)==0, no = pogojTmp, yes = TRUE)
if (pogoj1 | (pogoj2&pogoj3)) {
freqTab <- freqTab[,-which(colnames(freqTab) %in% c("Valid %", "Valid Cum. %"))]
freqTab <- freqTab[!(freqTab$Category %in% "Missing value"),]
}
if (cumulative == FALSE) freqTab <- freqTab[, -which(colnames(freqTab) %in% c("Cum. Freq.", "Cum. %", "Valid Cum. %"))]
if (total.row) {
freqTab <- rbind(freqTab, c("Total", rep(NA, times = ncol(freqTab)-1)))
for (i in c("Freq.", "%", "Valid %")) {
if (i %in% colnames(frekTab)) {
vsota <- sum(as.numeric(freqTab[,i]), na.rm = TRUE)
if (i %in% c("%", "Valid %")) vsota <- formatC(round(vsota), format = "f", digits = dec)
freqTab[freqTab$Category %in% "Total", i] <- vsota
}
}
}
if (language %in% c("Slovene", "slovene", "slo", "s")) {
if (total.row) freqTab[freqTab$Category %in% "Total", "Category"] <- "Skupaj"
freqTab[freqTab$Category %in% "Missing value", "Category"] <- "Manjkajoča vrednost"
colnames(freqTab)[colnames(freqTab) %in% "Category"] <- "Kategorija"
colnames(freqTab)[colnames(freqTab) %in% "Freq."] <- "Frekvenca"
colnames(freqTab)[colnames(freqTab) %in% "Cum. Freq."] <- "Kumulativna frekvenca"
colnames(freqTab)[colnames(freqTab) %in% "%"] <- "Delež"
colnames(freqTab)[colnames(freqTab) %in% "Cum. %"] <- "Kumulativni delež"
colnames(freqTab)[colnames(freqTab) %in% "Valid %"] <- "Veljavni delež"
}
freqTab[is.na(freqTab)] <- ""
return(freqTab)
}
report.freqTab(catVarName = "gear, dec = 2, useNA = "always", data = mtcars)
report.freqTab(catVarName = "gear", dec = 2, useNA = "always", data = mtcars)
library(rcmdcheck)
devtools::build_manual()
devtools::document()
?svyby
devtools::document()
devtools::document()
devtools::document()
getwd()
getwd()
devtools::document()
library(stringi)
stri_escape_unicode("£")
stri_escape_unicode("ž")
stri_escape_unicode("č")
report.ordinal <- function(ordVarNames, data, type = 1, dec = 1, dec.freq = 0, language = "english", attachLabels = FALSE){
utezi <- any(class(data) %in% c("survey.design2", "survey.design"))
if (!utezi) {
labele <- levels(data[, ordVarNames[1]])
} else {labele <- levels(data$variables[, ordVarNames[1]])}
nravni <- length(labele)
res <- matrix(NA, nrow = length(ordVarNames), ncol = nravni + 3)
colnames(res) <- c(labele, "n", "mean", "sd")
rownames(res) <- ordVarNames
if (!utezi) {
for (i in 1:length(ordVarNames)){
if (type == 1)  res[i, 1:(nravni+1)] <- c(round(prop.table(table(data[,ordVarNames[i]]))*100, dec), sum(!is.na(data[,ordVarNames[i]])))
if (type == 2) res[i, 1:(nravni+1)] <- c(table(data[, ordVarNames[i]]), sum(!is.na(data[,ordVarNames[i]])))
if (type == 3) res[i, 1:(nravni+1)] <- c(paste0(table(data[, ordVarNames[i]]), " (", round(prop.table(table(data[,ordVarNames[i]]))*100, dec), ")"), sum(!is.na(data[,ordVarNames[i]])))
res[i, (nravni+2):(nravni+3)] <- round(c(mean(as.numeric(data[, ordVarNames[i]]), na.rm = TRUE), sd(as.numeric(data[, ordVarNames[i]]), na.rm = TRUE)), digits = dec)
}
} else {
for (i in 1:length(ordVarNames)){
tmpCounts <- round(survey::svytable(stats::as.formula(paste("~", ordVarNames[i])), data), dec.freq)
tmpPerc <- round(prop.table(tmpCounts)*100, dec)
povprecje <- survey::svymean(stats::as.formula(paste("~as.numeric(", ordVarNames[i], ")")), data, na.rm = TRUE)[1]
stdOdklon <- jtools::svysd(stats::as.formula(paste("~as.numeric(", ordVarNames[i], ")")), data, na.rm = TRUE)[1]
if (type == 1)  res[i, 1:(nravni+1)] <- c(tmpPerc, sum(tmpCounts))
if (type == 2) res[i, 1:(nravni+1)] <- c(tmpCounts, sum(tmpCounts))
if (type == 3) res[i, 1:(nravni+1)] <- c(paste0(tmpCounts, " (", tmpPerc, " %)"), sum(tmpCounts))
res[i, (nravni+2):(nravni+3)] <- round(c(povprecje, stdOdklon), digits = dec)
}
}
if (language %in% c("Slovene", "slovene", "slo", "s")) {
colnames(res)[colnames(res) %in% "mean"] <- "povpre\u010dje"
colnames(res)[colnames(res) %in% "sd"] <- "standardni odklon"
}
if (attachLabels == TRUE){
if (!utezi) {
try({rownames(res) <- attributes(data)$variable.labels[rownames(res)]}, silent = TRUE)
} else {
try({rownames(res) <- attributes(data$variables)$variable.labels[rownames(res)]}, silent = TRUE)
}
}
#if (!is.null(ncharBreakString)) rownames(res) <- breakString(rownames(res), nChar = ncharBreakString)
return(res)
}
report.ordinal(ordVarNames, data, type = 1)
data <- data.frame(A = factor(c(1, 2, 3, 2), ordered = TRUE),
B = factor(c(2, 3, 2, 1), ordered = TRUE))
ordVarNames <- c("A", "B")
report.ordinal(ordVarNames, data, type = 1)
data <- data.frame(A = factor(c(1, 2, 3, 2), ordered = TRUE),
B = factor(c(2, 3, 2, 1), ordered = TRUE))
ordVarNames <- c("A", "B")
report.ordinal(ordVarNames, data, type = 1, language = "slo")
stri_escape_unicode("č")
stri_escape_unicode("ž")
stri_escape_unicode("č")
devtools::document()
devtools::document()
library(handyReport)
warning("bbb")
