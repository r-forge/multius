povA <- colMeans(thetaA)
plot(1:length(povA), povA, type = "l")
}
library(ggplot2)
data <- data.frame(x = thetaA[, length(e)], y = thetaB[, length(e)])
ggplot(data, aes(x=x, y=y) ) + stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
mean(thetaA[,length(e)])
mean(thetaB[,length(e)])
library(MASS)
library(statip)
library(mclust)
razlika <- function(y_0, y_theta){
ra <- hellinger(y_0, y_theta)
return(ra)
}
N <- 1000
n <- 1000
e <- rev(seq(from = 0.05, to = 0.1, by = 0.01))
y_0 <- rbeta(n, shape1 = 2, shape2 = 2)
hist(y_0)
thetaA <- matrix(NA, nrow = N, ncol = length(e))
thetaB <- matrix(NA, nrow = N, ncol = length(e))
wA <- matrix(NA, nrow = N, ncol = length(e))
wB <- matrix(NA, nrow = N, ncol = length(e))
sigma <- list()
for (i in 1:N){
y_theta <- Inf
pogoj <- TRUE
while (pogoj) {
tA <- runif(1, min = 1.5, max = 3)
tB <- runif(1, min = 1.5, max = 3)
y_theta <- rbeta(n, shape1 = tA, shape2 = tB)
pogoj <- !razlika(y_0 = y_0, y_theta) < e[1]
}
thetaA[i, 1] <- tA
thetaB[i, 1] <- tB
wA[i, 1] <- wB[i, 1] <- 1/N
# print(i)
}
sigma[[1]] <- 2*cov(cbind(thetaA[, 1], thetaB[, 1]))
for (t in 2:length(e)){
for (i in 1:N){
pogoj <- TRUE
while (pogoj) {
thetaA_star <- sample(x = thetaA[,(t-1)], size = 1, prob = wA[,(t-1)])
thetaB_star <- sample(x = thetaB[,(t-1)], size = 1, prob = wB[,(t-1)])
randomVred <- mvrnorm(n = 1, mu = c(thetaA_star, thetaB_star), Sigma = sigma[[t-1]])
tA <- randomVred[1]
tB <- randomVred[2]
y_theta <- rbeta(n = n, shape1 = tA, shape2 = tB)
if (any(is.nan(y_theta))) {pogoj <- TRUE} else {pogoj <- !razlika(y_0 = y_0, y_theta) < e[t]}
}
thetaA[i, t] <- tA
thetaB[i, t] <- tB
vsote <- c(0, 0)
for (k in 1:N) {
vsote <- vsote + c(wA[k, (t-1)], wB[k, (t-1)])*mvrnorm(n = 1, mu = c(thetaA[k, t-1], thetaB[k, t-1]), Sigma = sigma[[t-1]])
}
utezi <- dmvnorm(cbind(tA, tB), mean = c(thetaA_star, thetaB_star), sigma = sigma[[t-1]])/vsote
wA[i, t] <- utezi[1]
wB[i, t] <- utezi[2]
dmvnorm(cbind(tA, tB), mean = c(thetaA_star, thetaB_star), sigma = sigma[[t-1]])
}
sigma[[t]] <- 2*cov(cbind(thetaA[, t], thetaB[, t]))
povA <- colMeans(thetaA)
plot(1:length(povA), povA, type = "l")
}
library(ggplot2)
data <- data.frame(x = thetaA[, length(e)], y = thetaB[, length(e)])
ggplot(data, aes(x=x, y=y) ) + stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
mean(thetaA[,length(e)])
mean(thetaB[,length(e)])
library(MASS)
library(statip)
library(mclust)
razlika <- function(y_0, y_theta){
ra <- hellinger(y_0, y_theta)
return(ra)
}
N <- 100
n <- 1000
e <- rev(seq(from = 0.05, to = 0.1, by = 0.01))
y_0 <- rbeta(n, shape1 = 2, shape2 = 2)
hist(y_0)
thetaA <- matrix(NA, nrow = N, ncol = length(e))
thetaB <- matrix(NA, nrow = N, ncol = length(e))
wA <- matrix(NA, nrow = N, ncol = length(e))
wB <- matrix(NA, nrow = N, ncol = length(e))
sigma <- list()
for (i in 1:N){
y_theta <- Inf
pogoj <- TRUE
while (pogoj) {
tA <- runif(1, min = 1.5, max = 3)
tB <- runif(1, min = 1.5, max = 3)
y_theta <- rbeta(n, shape1 = tA, shape2 = tB)
pogoj <- !razlika(y_0 = y_0, y_theta) < e[1]
}
thetaA[i, 1] <- tA
thetaB[i, 1] <- tB
wA[i, 1] <- wB[i, 1] <- 1/N
# print(i)
}
sigma[[1]] <- 2*cov(cbind(thetaA[, 1], thetaB[, 1]))
for (t in 2:length(e)){
for (i in 1:N){
pogoj <- TRUE
while (pogoj) {
thetaA_star <- sample(x = thetaA[,(t-1)], size = 1, prob = wA[,(t-1)])
thetaB_star <- sample(x = thetaB[,(t-1)], size = 1, prob = wB[,(t-1)])
randomVred <- mvrnorm(n = 1, mu = c(thetaA_star, thetaB_star), Sigma = sigma[[t-1]])
tA <- randomVred[1]
tB <- randomVred[2]
y_theta <- rbeta(n = n, shape1 = tA, shape2 = tB)
if (any(is.nan(y_theta))) {pogoj <- TRUE} else {pogoj <- !razlika(y_0 = y_0, y_theta) < e[t]}
}
thetaA[i, t] <- tA
thetaB[i, t] <- tB
vsote <- c(0, 0)
for (k in 1:N) {
vsote <- vsote + c(wA[k, (t-1)], wB[k, (t-1)])*mvrnorm(n = 1, mu = c(thetaA[k, t-1], thetaB[k, t-1]), Sigma = sigma[[t-1]])
}
utezi <- dmvnorm(cbind(tA, tB), mean = c(thetaA_star, thetaB_star), sigma = sigma[[t-1]])/vsote
wA[i, t] <- utezi[1]
wB[i, t] <- utezi[2]
dmvnorm(cbind(tA, tB), mean = c(thetaA_star, thetaB_star), sigma = sigma[[t-1]])
}
sigma[[t]] <- 2*cov(cbind(thetaA[, t], thetaB[, t]))
povA <- colMeans(thetaA)
plot(1:length(povA), povA, type = "l")
}
library(ggplot2)
data <- data.frame(x = thetaA[, length(e)], y = thetaB[, length(e)])
ggplot(data, aes(x=x, y=y) ) + stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
mean(thetaA[,length(e)])
mean(thetaB[,length(e)])
library(MASS)
library(statip)
library(mclust)
razlika <- function(y_0, y_theta){
ra <- hellinger(y_0, y_theta)
return(ra)
}
N <- 100
n <- 1000
e <- rev(seq(from = 0.01, to = 0.1, by = 0.01))
y_0 <- rbeta(n, shape1 = 2, shape2 = 2)
hist(y_0)
thetaA <- matrix(NA, nrow = N, ncol = length(e))
thetaB <- matrix(NA, nrow = N, ncol = length(e))
wA <- matrix(NA, nrow = N, ncol = length(e))
wB <- matrix(NA, nrow = N, ncol = length(e))
sigma <- list()
for (i in 1:N){
y_theta <- Inf
pogoj <- TRUE
while (pogoj) {
tA <- runif(1, min = 1.5, max = 3)
tB <- runif(1, min = 1.5, max = 3)
y_theta <- rbeta(n, shape1 = tA, shape2 = tB)
pogoj <- !razlika(y_0 = y_0, y_theta) < e[1]
}
thetaA[i, 1] <- tA
thetaB[i, 1] <- tB
wA[i, 1] <- wB[i, 1] <- 1/N
# print(i)
}
sigma[[1]] <- 2*cov(cbind(thetaA[, 1], thetaB[, 1]))
for (t in 2:length(e)){
for (i in 1:N){
pogoj <- TRUE
while (pogoj) {
thetaA_star <- sample(x = thetaA[,(t-1)], size = 1, prob = wA[,(t-1)])
thetaB_star <- sample(x = thetaB[,(t-1)], size = 1, prob = wB[,(t-1)])
randomVred <- mvrnorm(n = 1, mu = c(thetaA_star, thetaB_star), Sigma = sigma[[t-1]])
tA <- randomVred[1]
tB <- randomVred[2]
y_theta <- rbeta(n = n, shape1 = tA, shape2 = tB)
if (any(is.nan(y_theta))) {pogoj <- TRUE} else {pogoj <- !razlika(y_0 = y_0, y_theta) < e[t]}
}
thetaA[i, t] <- tA
thetaB[i, t] <- tB
vsote <- c(0, 0)
for (k in 1:N) {
vsote <- vsote + c(wA[k, (t-1)], wB[k, (t-1)])*mvrnorm(n = 1, mu = c(thetaA[k, t-1], thetaB[k, t-1]), Sigma = sigma[[t-1]])
}
utezi <- dmvnorm(cbind(tA, tB), mean = c(thetaA_star, thetaB_star), sigma = sigma[[t-1]])/vsote
wA[i, t] <- utezi[1]
wB[i, t] <- utezi[2]
dmvnorm(cbind(tA, tB), mean = c(thetaA_star, thetaB_star), sigma = sigma[[t-1]])
}
sigma[[t]] <- 2*cov(cbind(thetaA[, t], thetaB[, t]))
povA <- colMeans(thetaA)
plot(1:length(povA), povA, type = "l")
}
library(ggplot2)
data <- data.frame(x = thetaA[, length(e)], y = thetaB[, length(e)])
ggplot(data, aes(x=x, y=y) ) + stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
mean(thetaA[,length(e)])
mean(thetaB[,length(e)])
thetaA
ncol(thetaA)
colnames(thetaA) <- 1:ncol(thetaA)
thetaA
reshape(thetaA)
reshape(thetaA, varying = 1:10)
reshape(thetaA, varying = 1:10, direction = "long")
reshape(thetaA, varying = as.character(1:10), direction = "long")
meltResulsts <- melt(
thetaA,
measure.vars = colnames(thetaA),
variable.name = "approach",
value.name = "ARI"
)
library(reshape2)
meltResulsts <- melt(
thetaA,
measure.vars = colnames(thetaA),
variable.name = "approach",
value.name = "ARI"
)
meltResulsts
library(reshape2)
meltResulsts <- melt(
thetaA,
measure.vars = colnames(thetaA),
variable.name = "approach",
value.name = "ARI"
)
meltResulsts
meltResulsts <- melt(
thetaA,
measure.vars = colnames(thetaA),
value.name = "A"
)
meltResulsts
meltResulsts <- melt(
thetaA,
measure.vars = colnames(thetaA),
value.name = "A"
)[,2:3]
meltResulsts
A <- melt(
thetaA,
measure.vars = colnames(thetaA),
value.name = "A"
)[,2:3]
B <- melt(
thetaB,
measure.vars = colnames(thetaA),
value.name = "A"
)[,2:3]
A
B
cbind(A, B)
A <- melt(
thetaA,
measure.vars = colnames(thetaA),
value.name = "A"
)[,2:3]
B <- melt(
thetaB,
measure.vars = colnames(thetaA),
value.name = "B"
)[,2:3]
cbind(A, B)
cbind(A, B[, 2])
data  <- cbind(A, B[, 2])
data <- data.frame(x = thetaA[, length(e)], y = thetaB[, length(e)])
ggplot(data, aes(x=A, y=B) ) + stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
data  <- cbind(A, B[, 2])
ggplot(data, aes(x=A, y=B) ) + stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
data
data  <- cbind(A, B)
ggplot(data, aes(x=A, y=B) ) + stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
A <- melt(
thetaA,
measure.vars = colnames(thetaA),
value.name = "A"
)[,2:3]
B <- melt(
thetaB,
measure.vars = colnames(thetaA),
value.name = "B"
)[,2:3]
data  <- cbind(A, B)
ggplot(data, aes(x=A, y=B) ) + stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
data
A <- melt(
thetaA,
measure.vars = colnames(thetaA),
value.name = "A"
)[,2:3]
B <- melt(
thetaB,
measure.vars = colnames(thetaA),
value.name = "B"
)[,3]
data  <- cbind(A, B)
ggplot(data, aes(x=A, y=B) ) + stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data, aes(x=A, y=B) ) +
facet_grid(Var2)
ggplot(data, aes(x=A, y=B) ) +
facet_grid(.~Var2)
ggplot(data, aes(x=A, y=B) ) +
facet_wrap(.~Var2)
ggplot(data, aes(x=A, y=B) ) +
facet_wrap(.~as.factor(Var2)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data, aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
warnings()
ggplot(data[data$Var2%in%1], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%1,], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%2,], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:3),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:4),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:5),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:6),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:6),], aes(x=A, y=B) ) +
facet_wrap(.~Var2, scales = "free") +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:7),], aes(x=A, y=B) ) +
facet_wrap(.~Var2, scales = "free") +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:8),], aes(x=A, y=B) ) +
facet_wrap(.~Var2, scales = "free") +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:7),], aes(x=A, y=B) ) +
facet_wrap(.~Var2, scales = "free") +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:7),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:7),], aes(x=A, y=B) ) +
facet_wrap(.~Var2, scales = "free") +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:7),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:8),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..level..), geom = "polygon", colour="white")
ggplot(data[data$Var2%in%c(1:8),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
geom_bin2d()
ggplot(data[data$Var2%in%c(1:8),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
geom_hex()
ggplot(data[data$Var2%in%c(1:8),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
geom_hex() +
theme_bw()
ggplot(data[data$Var2%in%c(1:8),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
geom_hex()
ggplot(data[data$Var2%in%c(1:8),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(
legend.position='none'
)
ggplot(data[data$Var2%in%c(1:8),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
geom_hex()
library(reshape2)
A <- melt(thetaA, measure.vars = colnames(thetaA), value.name = "A")[,2:3]
B <- melt(thetaB, measure.vars = colnames(thetaB), value.name = "B")[,3]
data  <- cbind(A, B)
ggplot(data[data$Var2%in%c(1:8),], aes(x=A, y=B) ) +
facet_wrap(.~Var2) +
geom_hex()
setwd("C:/Users/marss/Dropbox/FDV/multiUS/multiUS")
install.packages("roxygen2")
library(gplots)
install.packages("gplots")
install.packages("CCA")
library(multiUS)
wardCF
wardKF()
library(multiUS)
library(multiUS)
library(multiUS)
library(multiUS)
?Omega
library(multiUS)
?Omega
library(multiUS)
?Omega
cancorPlus(x = mtcars[, c(1,2,3)], y = mtcars[, c(4,5, 6)])
tmp<-cancorPlus(x = mtcars[, c(1,2,3)], y = mtcars[, c(4,5, 6)])
plotCCA <- function(ccRes, xTitle = "X", yTitle = "Y", inColors = TRUE, scaleLabelsFactor = 1/2,
what = "reg", nDigits = 2){
# try(dev.off(), silent = TRUE)
corr <- ccRes$cor
if (what == "reg") {
Xcoef <- ccRes$xcoef[,1:length(corr)]
Ycoef <- ccRes$ycoef[,1:length(corr)]
}
if (what == "cor") {
Xcoef <- ccRes$scores$corr.X.xscores[,1:length(corr)]
Ycoef <- ccRes$scores$corr.Y.yscores[,1:length(corr)]
if (is.null(Xcoef)){
warning("There are no correlations between the canonical correlations and variables in ccRes object. Set useCCApackage = FALSE in cancorPlus function. \n Regression coefficients are ploted instead.")
Xcoef <- ccRes$xcoef[,1:length(corr)]
Ycoef <- ccRes$ycoef[,1:length(corr)]
}
}
nVarX <- nrow(Xcoef)
nVarY <- nrow(Ycoef)
nCorr <- length(corr)
yL <- c(1, 1 + nVarX + nVarY + 3)
xL <- c(0.9, max(nCorr, ncol(Ycoef)) + 1)
if (is.null(rownames(ccRes$xcoef))) {namesVarX <- paste0("Var X", 1:nVarX)} else {namesVarX <- rownames(ccRes$xcoef)}
if (is.null(rownames(ccRes$ycoef))) {namesVarY <- paste0("Var Y", 1:nVarY)} else {namesVarY <- rownames(ccRes$ycoef)}
varNames <- c(namesVarX, "", "", "", namesVarY)
barveX <- matrix(rgb(red = 0, green = 0, blue = 0, maxColorValue = 1),
nrow = nVarX,
ncol = nCorr)
barveY <- matrix(rgb(red = 0, green = 0, blue = 0, maxColorValue = 1),
nrow = nVarY,
ncol = ncol(Ycoef))
if (inColors == TRUE) {
maxColor <- max(abs(c(as.vector(Xcoef), as.vector(Ycoef))))
for (i in 1:nrow(barveX)){
for (j in 1:ncol(barveX)){
if (Xcoef[i,j] > 0) barveX[i,j] <- rgb(red = 0, green = 0, blue = abs(Xcoef[i,j]), maxColorValue = maxColor)
if (Xcoef[i,j] < 0) barveX[i,j] <- rgb(red = abs(Xcoef[i,j]), green = 0, blue = 0, maxColorValue = maxColor)
}
}
for (i in 1:nrow(barveY)){
for (j in 1:ncol(barveY)){
if (Ycoef[i,j] > 0) barveY[i,j] <- rgb(red = 0, green = 0, blue = abs(Ycoef[i,j]), maxColorValue = maxColor)
if (Ycoef[i,j] < 0) barveY[i,j] <- rgb(red = abs(Ycoef[i,j]), green = 0, blue = 0, maxColorValue = maxColor)
}
}
}
par(mar = c(1, 2, 1, 1))
plot("1", ylim = yL, xlim = xL, xaxt = 'n', yaxt = 'n', bty = 'n', pch = '', ylab = '', xlab = '')
text(x = 2:xL[2], y = yL[2], labels = paste0("CC", 1:(xL[2]-1)), font = 2)
text(x = 1, y = 1:length(varNames), labels = varNames, pos = 4, font = 2)
text(x = rep(2:(ncol(Ycoef)+1), each = nVarY),
y = rep((nVarX+1):((nVarX+nVarY))+3, 3),
labels = format(round(Ycoef, nDigits), digits=2, nsmall=2), cex = abs(Ycoef)**scaleLabelsFactor+0.2,
col = barveY, xpd = TRUE)
text(x = rep(2:(nCorr+1), each = nVarX),
y = rep(1:nVarX, nCorr),
labels = format(round(Xcoef, nDigits), digits=2, nsmall=2), cex = abs(Xcoef)**scaleLabelsFactor+0.2,
col = barveX, xpd = TRUE)
arrows(x0 = rep(2:xL[2]), x1 = rep(2:xL[2]), y1 = nVarX+3, y0 = nVarX+1, length = 0.1)
arrows(x0 = rep(2:xL[2]), x1 = rep(2:xL[2]), y1 = nVarX+1, y0 = nVarX+3, length = 0.1)
text(x = 2:(ncol(Ycoef)+1), y = nVarX+2,
labels = format(round(corr, nDigits), digits=2, nsmall=2),
font = 2,
col = ifelse(sign(corr), yes = "blue", no = "red"))
text(x = 0.7, y = mean(1:nVarX), label = xTitle, xpd = TRUE, srt = 90)
text(x = 0.7, y = mean(1:nVarY) + nVarX+3, label = yTitle, xpd = TRUE, srt = 90)
}
plotCCA(tmp)
plotCCA(tmp, scaleLabelsFactor = 2)
plotCCA(tmp, scaleLabelsFactor = 1)
plotCCA(tmp, scaleLabelsFactor = 1/3)
plotCCA(tmp, scaleLabelsFactor = 1, )
plotCCA(tmp, scaleLabelsFactor = 1)
plotCCA(tmp, scaleLabelsFactor = 0)
plotCCA(tmp, scaleLabelsFactor = 0, what = "reg")
plotCCA(tmp, scaleLabelsFactor = 1/2, what = "reg")
plotCCA(tmp, scaleLabelsFactor = 1/2, what = "cor")
tmp<-cancorPlus(x = mtcars[, c(1,2,3)], y = mtcars[, c(4,5, 6)], useCCApackage = TRUE)
plotCCA(tmp, scaleLabelsFactor = 1/2, what = "cor")
library(multiUS)
?plotCCA
corTestDf(mtcars[, 3:5])
print(corTestDf(mtcars[, 3:5]))
printCorTestDf(corTestDf(mtcars[, 3:5]))
print(corTestDf(mtcars[, 3:5]))
printcorTestDf(mtcars[, 3:5])
printCorTestDf(mtcars[, 3:5])
corTestDf(mtcars[, 3:5])
printCorTestDf(corTestDf(mtcars[, 3:5]))
print(corTestDf(mtcars[, 3:5]))
corTestDf(mtcars[, 3:5])
corTestDf(mtcars[, 3:5]) -> tmp
print(tmp)
printCorTestDf(tmp)
library(multiUS)
install.packages("handyReport", repos="http://R-Forge.R-project.org")
x <- mtcars$gear
x[sample(1:length(x), size = 5, replace = FALSE)] <- NA
report.freqTab(x = x, dec = 2, useNA = "always")
library(handyReport)
x <- mtcars$gear
x[sample(1:length(x), size = 5, replace = FALSE)] <- NA
report.freqTab(x = x, dec = 2, useNA = "always")
report.freqTab
